"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createInMemoryClientWithPeer = void 0;
const InmemoryBlockchain_1 = require("./InmemoryBlockchain");
const network_1 = require("./network");
const protocol_1 = require("./protocol");
function createInMemoryClientWithPeer(peer_url = 'sanchonet-node.play.dev.cardano.org:3001', network_magic = 4, log_network = false) {
    const blockchain = new InmemoryBlockchain_1.InmemoryBlockchain();
    const url = peer_url;
    const peer = new network_1.NodePeer(url, true, {
        logPackets: log_network
    });
    peer.connect((err) => {
        if (!err) {
            const handShakeProtocol = peer.createProtocolChannel(0);
            protocol_1.HandShake.initiate(handShakeProtocol, () => {
                const txSubmissionChannel = peer.createProtocolChannel(4);
                protocol_1.TxSubmission.initiate(txSubmissionChannel);
                // const keepAliveChannel=peer.createProtocolChannel(8)!
                // KeepAlive.initiate(keepAliveChannel)
                const chainSyncChannel = peer.createProtocolChannel(2);
                protocol_1.ChainSync.initiate(chainSyncChannel, blockchain);
                const blockFetchChannel = peer.createProtocolChannel(3);
                const blockFetch = new protocol_1.BlockFetch(blockFetchChannel);
                blockchain.setBlockSource((start, end, cb) => {
                    blockFetch.requestBlocks(start, end, {
                        onBlock(block) {
                            cb(block);
                        },
                        onComplete(start, end) {
                            console.log("BlockFetch complete");
                        },
                        onError(reason) {
                            console.log("BlockFetch: Unexpected error", reason);
                        }
                    });
                });
            }, network_magic);
        }
        else {
            console.error("Couldn't connect to peer", err);
        }
    });
    return blockchain;
}
exports.createInMemoryClientWithPeer = createInMemoryClientWithPeer;
//# sourceMappingURL=helper.js.map