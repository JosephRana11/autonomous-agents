"use strict";
function parseCert(flatCert) {
    switch (flatCert[0]) {
        // ; POOL
        // pool_registration = (3, pool_params)
        // pool_retirement = (4, pool_keyhash, epoch)
        //
        // ; numbers 5 and 6 used to be the Genesis and MIR certificates respectively,
        // ; which were deprecated in Conway
        //
        // ; DELEG
        // reg_cert = (7, stake_credential, coin)
        // unreg_cert = (8, stake_credential, coin)
        // vote_deleg_cert = (9, stake_credential, drep)
        // stake_vote_deleg_cert = (10, stake_credential, pool_keyhash, drep)
        // stake_reg_deleg_cert = (11, stake_credential, pool_keyhash, coin)
        // vote_reg_deleg_cert = (12, stake_credential, drep, coin)
        // stake_vote_reg_deleg_cert = (13, stake_credential, pool_keyhash, drep, coin)
        case 7:
            return {
                type: "register",
                key: flatCert[1],
                deposit: BigInt(flatCert[2])
            };
        case 8:
            return {
                type: "unregister",
                key: flatCert[1],
                deposit: BigInt(flatCert[2])
            };
        case 9:
            return {
                type: "delegate",
                key: flatCert[1],
                drep: flatCert[2],
            };
        case 10:
            return {
                type: "delegate",
                key: flatCert[1],
                pool: flatCert[2],
                drep: flatCert[3],
            };
        case 11:
            return {
                type: "reg-deleg",
                key: flatCert[1],
                pool: flatCert[2],
                deposit: flatCert[3]
            };
        case 12:
            return {
                type: "reg-deleg",
                key: flatCert[1],
                drep: flatCert[2],
                deposit: flatCert[3]
            };
        case 13:
            return {
                type: "reg-deleg",
                key: flatCert[1],
                pool: flatCert[2],
                drep: flatCert[3],
                deposit: flatCert[4]
            };
        // ; GOVCERT
        // auth_committee_hot_cert = (14, committee_cold_credential, committee_hot_credential)
        // resign_committee_cold_cert = (15, committee_cold_credential, anchor / null)
        // reg_drep_cert = (16, drep_credential, coin, anchor / null)
        // unreg_drep_cert = (17, drep_credential, coin)
        // update_drep_cert = (18, drep_credential, anchor / null)
        case 16:
            return {
                type: "register",
                drep: flatCert[1],
                deposit: flatCert[2],
                anchor: flatCert[3]
            };
        case 17:
            return {
                type: "unregister",
                drep: flatCert[1],
                deposit: flatCert[2]
            };
        case 18:
            return {
                type: "update",
                drep: flatCert[1],
                anchor: flatCert[2]
            };
        //
        //
        // delta_coin = int
        //
        // credential =
        //     [  0, addr_keyhash
        //         // 1, scripthash
        //     ]
        //
        // drep =
        //     [ 0, addr_keyhash
        //         // 1, scripthash
        //         // 2  ; always abstain
        //         // 3  ; always no confidence
        //     ]
        //
        // stake_credential = credential
        // drep_credential = credential
        // committee_cold_credential = credential
        // committee_hot_credential = credential
    }
    throw Error("Unknown certificate type: " + flatCert[0]);
}
//# sourceMappingURL=certificates.js.map