"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const InmemoryBlockchain_1 = require("./InmemoryBlockchain");
const network_1 = require("./network");
// import * as persistance from "./persistance"
const blockchain = new InmemoryBlockchain_1.InmemoryBlockchain();
const url = '65.108.2.16:3001';
if (process.argv.length < 4 || process.argv.length > 6) {
    console.error("Expected exactly 2 program args");
    process.exit(1);
}
network_1.NodePeer.forward(process.argv[2], process.argv[3], (role, peer, header, payload) => {
    header.protocolId != 8 && console.log(peer.remoteAddress + " " + role + " : " + "timestamp=" + header.time + " miniProto=" + header.protocolId + " direction=" + header.direction + " payloadLen=" + header.payloadLen + " : " + payload.toString('hex'));
});
//# sourceMappingURL=cardano-interceptor.js.map