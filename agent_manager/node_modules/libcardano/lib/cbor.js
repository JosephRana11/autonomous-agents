"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const cbor_x_1 = require("cbor-x");
const cbor = __importStar(require("cbor"));
function cborxBackend() {
    class AuxData {
        constructor(value) {
            this.value = value;
        }
    }
    // this is required to override default beehaviour of AuxData
    (0, cbor_x_1.addExtension)({
        Class: AuxData,
        tag: 259,
        encode(instance, encode) {
            return encode(instance.value);
        },
        decode(data) {
            return new AuxData(data);
        },
    });
    const encoder = new cbor_x_1.Encoder({
        mapsAsObjects: false,
        useRecords: false,
    });
    const decoder = new cbor_x_1.Decoder({ mapsAsObjects: false });
    return {
        encode: (x) => encoder.encode(x),
        decode: (x) => decoder.decode(x),
        createStreamDecoder: () => {
            return new cbor_x_1.DecoderStream({ mapsAsObjects: false });
        }
    };
}
function cborBackend() {
    return {
        encode: cbor.encodeOne,
        decode: cbor.decodeFirstSync,
        createStreamDecoder: () => {
            return new cbor.Decoder();
        }
    };
}
const backend = cborxBackend();
exports.default = backend;
//# sourceMappingURL=cbor.js.map