"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShelleyWalletAddress = exports.ShelleyWallet = exports.Ed25519Key = void 0;
const ed = __importStar(require("@noble/ed25519"));
const bech32_1 = require("bech32");
const blake = __importStar(require("blakejs"));
const KEYHASH_LENGTH = 28;
const ADDR_LENGTH = KEYHASH_LENGTH * 2 + 1;
// Stores ed25519 KeyPair and hash of publicKey
class Ed25519Key {
    constructor(priv, pub, pkh) {
        this.private = priv;
        this.public = pub;
        this.pkh = pkh;
    }
    static generate() {
        return __awaiter(this, void 0, void 0, function* () {
            const privKey = ed.utils.randomPrivateKey(); // Secure random private key
            return yield Ed25519Key.fromPrivateKey(privKey);
        });
    }
    static fromPrivateKey(privKey) {
        return __awaiter(this, void 0, void 0, function* () {
            const pubKey = yield ed.getPublicKeyAsync(privKey);
            const pkh = blake.blake2b(pubKey, undefined, KEYHASH_LENGTH);
            const key = new Ed25519Key(privKey, pubKey, pkh);
            console.log("loaded", "Ed25519Key", key.json());
            return key;
        });
    }
    static fromPrivateKeyHex(privKey) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield Ed25519Key.fromPrivateKey(Uint8Array.from(Buffer.from(privKey, "hex")));
        });
    }
    bech32Pkh(prefix = "stake") {
        return bech32_1.bech32.encode(prefix, bech32_1.bech32.toWords(this.pkh));
    }
    bech32PublicKey(prefix = "vk_") {
        return bech32_1.bech32.encode(prefix, bech32_1.bech32.toWords(this.public));
    }
    bech32PrivateKey(prefix = "sk_") {
        return bech32_1.bech32.encode(prefix, bech32_1.bech32.toWords(this.private));
    }
    signRaw(message) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield ed.signAsync(message, this.private);
        });
    }
    verify(message, signature) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield ed.verifyAsync(signature, message, this.public);
        });
    }
    json() {
        return {
            private: Buffer.from(this.private).toString("hex"),
            public: Buffer.from(this.public).toString("hex"),
            pkh: Buffer.from(this.pkh).toString("hex"),
        };
    }
    static fromJson(json) {
        if (!json || typeof json !== "object") {
            throw new Error("Invalid JSON format for Ed25519Key: Input must be a non-null object.");
        }
        if (!json.private || !json.public || !json.pkh) {
            throw new Error("Invalid JSON format for Ed25519Key: Missing required fields (private, public, or pkh).");
        }
        return new Ed25519Key(Uint8Array.from(Buffer.from(json.private, "hex")), Uint8Array.from(Buffer.from(json.public, "hex")), Uint8Array.from(Buffer.from(json.pkh, "hex")));
    }
}
exports.Ed25519Key = Ed25519Key;
// Shelley Wallet has 2 ed25519 key pair
// - one for payment purpose
// - one for staking/governance purpose
class ShelleyWallet {
    constructor(payment, stake) {
        this.paymentKey = payment;
        this.stakeKey = stake;
    }
    static generate() {
        return __awaiter(this, void 0, void 0, function* () {
            const wallet = new ShelleyWallet(yield Ed25519Key.generate(), yield Ed25519Key.generate());
            console.log("generated", "Ed25519Key", wallet);
            return wallet;
        });
    }
    addressBech32(networkId) {
        const prefix = networkId == 0 ? "addr_test" : "addr";
        return bech32_1.bech32.encode(prefix, bech32_1.bech32.toWords(Buffer.from(this.addressRawBytes(networkId))), 200);
    }
    addressRawBytes(networkId) {
        const concatenatedArray1 = new Uint8Array(ADDR_LENGTH);
        concatenatedArray1[0] = networkId;
        concatenatedArray1.set(this.paymentKey.pkh, 1);
        concatenatedArray1.set(this.stakeKey.pkh, KEYHASH_LENGTH + 1);
        return concatenatedArray1;
    }
    rewardAddressRawBytes(network) {
        const rewardAccountPrefix = 0xe0;
        const header = network | rewardAccountPrefix;
        const result = new Uint8Array(KEYHASH_LENGTH + 1);
        result[0] = header;
        result.set(this.stakeKey.pkh, 1);
        return result;
    }
    rewardAddressBech32(networkId) {
        const prefix = networkId == 0 ? "stake_test" : "stake";
        return bech32_1.bech32.encode(prefix, bech32_1.bech32.toWords(Buffer.from(this.rewardAddressRawBytes(networkId))), 200);
    }
    toJSON() {
        return {
            payment: this.paymentKey.json(),
            stake: this.stakeKey.json(),
        };
    }
    static fromJson(obj) {
        if (!obj || typeof obj !== "object") {
            throw new Error("ShelleyWallet.fromJson: The input must be an object.");
        }
        const paymentKey = obj.payment;
        const stakeKey = obj.stake;
        if (!paymentKey || typeof paymentKey !== "object") {
            throw new Error("ShelleyWallet.fromJson : Invalid payment key: It must be an object.");
        }
        if (!stakeKey || typeof stakeKey !== "object") {
            throw new Error("ShelleyWallet.fromJson : Invalid stake key: It must be an object.");
        }
        return new ShelleyWallet(Ed25519Key.fromJson(paymentKey), Ed25519Key.fromJson(stakeKey));
    }
}
exports.ShelleyWallet = ShelleyWallet;
class ShelleyWalletAddress {
    constructor(network, pkh, skh) {
        this.network =
            network == "mainnet" ? 1 : network == "testnet" ? 0 : network;
        this.paymentKeyHash = pkh;
        this.stakeKeyHash = skh;
    }
    static fromRawBytes(bytea) {
        let bytebuffer;
        if (bytea.length == ADDR_LENGTH * 2 && typeof bytea == "string") {
            bytebuffer = Buffer.from(bytea, "hex");
        }
        else {
            if (bytea.length !== ADDR_LENGTH) {
                throw Error("ShelleyAddress.fromRawBytes: Invalid byte array length. expected: " +
                    ADDR_LENGTH +
                    " got: " +
                    bytea.length);
            }
            bytebuffer = Buffer.from(bytea);
        }
        let paymentKeyHash = bytebuffer.subarray(1, 29);
        let stakeKeyHash = bytebuffer.subarray(29, ADDR_LENGTH);
        return new ShelleyWalletAddress(bytebuffer.at(0), paymentKeyHash, stakeKeyHash);
    }
    toBech32() {
        const prefix = this.network == 0 ? "addr_test" : "addr";
        return bech32_1.bech32.encode(prefix, bech32_1.bech32.toWords(Buffer.from(this.toRawBytes())), 200);
    }
    toRawBytes() {
        const rawBytes = new Uint8Array(ADDR_LENGTH);
        rawBytes[0] = this.network;
        rawBytes.set(this.paymentKeyHash, 1);
        rawBytes.set(this.stakeKeyHash, KEYHASH_LENGTH + 1);
        return rawBytes;
    }
    toRawBytesHex() {
        return Buffer.from(this.toRawBytes()).toString("hex");
    }
    toJSON() {
        return this.toBech32();
    }
}
exports.ShelleyWalletAddress = ShelleyWalletAddress;
//# sourceMappingURL=crypto.js.map