"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StaticFileBlockchain = void 0;
const InmemoryBlockchain_1 = require("./InmemoryBlockchain");
const fs_1 = __importDefault(require("fs"));
const cbor_1 = __importDefault(require("cbor"));
class StaticFileBlockchain extends InmemoryBlockchain_1.InmemoryBlockchain {
    constructor(filename, format = 'cbor') {
        super();
        this.format = format;
        this.loadFromFile(filename);
    }
    loadFromFile(fileName) {
        let fileData = null;
        try {
            const fileContent = fs_1.default.readFileSync(fileName);
            if (fileContent.at(0) == '{'.charCodeAt(0)) {
                const jsonData = JSON.parse(fileContent.toString());
                jsonData.forEach(v => {
                    v[0][1] = Buffer.from(v[0][1], 'hex');
                });
                fileData = jsonData;
            }
            else {
                fileData = cbor_1.default.decodeFirstSync(fileContent);
            }
        }
        catch (e) {
        }
        if (fileData) {
            this.rewrite(fileData);
        }
        let timeout;
        const saveData = () => {
            if (this.format == 'json') {
                const fileData = this.blockchain.map((v) => {
                    return [[v[0][0], v[0][1].toString('hex')], v[1]];
                });
                fs_1.default.writeFileSync(fileName, JSON.stringify(fileData, null, 2));
            }
            else
                fs_1.default.writeFileSync(fileName, cbor_1.default.encodeOne(this.blockchain));
        };
        const handler = () => {
            try {
                saveData();
                timeout = setTimeout(handler, 10000);
            }
            catch (e) {
                timeout = undefined;
                console.error("Blockchain File Sync disabled due to failure", e.message);
            }
        };
        process.on('SIGINT', () => {
            saveData();
            clearTimeout(timeout);
            process.exit();
        });
        timeout = setTimeout(handler, 10000);
    }
}
exports.StaticFileBlockchain = StaticFileBlockchain;
//# sourceMappingURL=StaticFileBlockchain.js.map