"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const { spawn } = require('child_process');
let incompleteLine = ''; // Buffer for incomplete line
// Spawn the child process
const command = 'tail'; // Replace with the actual command to run
const args = ['-f', './node-log.1.txt']; // Replace with the arguments for the command
const childProcess = spawn(command, args);
// Process each line of the output
childProcess.stdout.on('data', (data) => {
    const output = data.toString();
    const lines = output.split('\n');
    // Append the first line to the incomplete line from the previous chunk
    lines[0] = incompleteLine + lines[0];
    // Process each line except the last one (incomplete line)
    for (let i = 0; i < lines.length - 1; i++) {
        const line = lines[i];
        // Process each complete line as needed
        console.log(line);
    }
    // Save the incomplete line for the next chunk
    incompleteLine = lines[lines.length - 1];
});
// Handle process termination
childProcess.on('close', (code) => {
    // Process the remaining incomplete line if any
    if (incompleteLine) {
        console.log(incompleteLine);
    }
    console.log(`Child process exited with code ${code}`);
});
//# sourceMappingURL=cardano-log-parser.js.map