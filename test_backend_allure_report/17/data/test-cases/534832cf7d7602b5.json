{"uid":"534832cf7d7602b5","name":"Test Manual Info Action Proposal Logs","fullName":"test_cases.test_agent_functions.TestAgentFunctionExecution#test_manual_info_action_proposal_logs","historyId":"011c6a73c3f72f6a7ca823b0704e81e3","time":{"start":1730869108031,"stop":1730869108282,"duration":251},"status":"failed","statusMessage":"AssertionError: No successful 'create infoAction proposal' log found | Failed Logs: None","statusTrace":"logs = [], function_name = 'createInfoGovAction', trigger_type = 'MANUAL'\nmessage = \"No successful 'create infoAction proposal' log found\"\n\n    def assert_successful_log(logs, function_name, trigger_type, message):\n        try:\n>           assert any(\n                log[\"functionName\"] == function_name\n                and log[\"triggerType\"] == trigger_type\n                and log[\"status\"] is True\n                and log[\"success\"] is True\n                for log in logs\n            ), message\nE           AssertionError: No successful 'create infoAction proposal' log found\nE           assert False\nE            +  where False = any(<generator object assert_successful_log.<locals>.<genexpr> at 0x7fb020378f20>)\n\ntest_cases/test_agent_functions.py:6: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_cases.test_agent_functions.TestAgentFunctionExecution object at 0x7fb020c548c0>\nrun_admin_agent_fixture = <Response [200]>\nautonomous_agent_api = <lib.autonomous_agent_api.AutonomousAgentApi object at 0x7fb0205310d0>\n\n    @allure.sub_suite(\"MANUAL\")\n    @allure.title(\"Test Manual Info Action Proposal Logs\")\n    @allure.feature(\"Create Gov Info Action Function\")\n    def test_manual_info_action_proposal_logs(\n        self, run_admin_agent_fixture, autonomous_agent_api\n    ):\n        agent_id = run_admin_agent_fixture.json().get(\"id\")\n        logs = (\n            autonomous_agent_api.get_trigger_history(\n                param=f\"?agent_id={agent_id}&functionName={'createInfoGovAction'}\"\n            )\n            .json()\n            .get(\"items\")\n        )\n>       assert_successful_log(\n            logs,\n            function_name=\"createInfoGovAction\",\n            trigger_type=\"MANUAL\",\n            message=\"No successful 'create infoAction proposal' log found\",\n        )\n\ntest_cases/test_agent_functions.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlogs = [], function_name = 'createInfoGovAction', trigger_type = 'MANUAL'\nmessage = \"No successful 'create infoAction proposal' log found\"\n\n    def assert_successful_log(logs, function_name, trigger_type, message):\n        try:\n            assert any(\n                log[\"functionName\"] == function_name\n                and log[\"triggerType\"] == trigger_type\n                and log[\"status\"] is True\n                and log[\"success\"] is True\n                for log in logs\n            ), message\n        except AssertionError:\n            failed_logs = [log for log in logs if log[\"functionName\"] == function_name]\n    \n            if failed_logs:\n                allure.attach(\n                    str(failed_logs),\n                    name=\"Filtered Logs with Matching Function Name\",\n                    attachment_type=allure.attachment_type.JSON,\n                )\n            else:\n                allure.attach(\n                    \"No log found with the given parameters.\",\n                    name=\"No Matching Logs\",\n                    attachment_type=allure.attachment_type.TEXT,\n                )\n>           raise AssertionError(\n                f\"{message} | Failed Logs: {failed_logs if failed_logs else 'None'}\"\n            )\nE           AssertionError: No successful 'create infoAction proposal' log found | Failed Logs: None\n\ntest_cases/test_agent_functions.py:28: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"autonomous_agent_api","time":{"start":1730868620713,"stop":1730868620714,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"admin_login_response","time":{"start":1730868622943,"stop":1730868623065,"duration":122},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"admin_login_cookie","time":{"start":1730868623065,"stop":1730868623065,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"create_template_fixture","time":{"start":1730868623065,"stop":1730868623192,"duration":127},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"edit_template_fixture","time":{"start":1730868623192,"stop":1730868623332,"duration":140},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"create_admin_agent_fixture","time":{"start":1730868623332,"stop":1730868623463,"duration":131},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"edit_admin_agent_fixture","time":{"start":1730868623658,"stop":1730868623841,"duration":183},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"load_funds_to_agent_address","time":{"start":1730868623843,"stop":1730868744864,"duration":121021},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"run_admin_agent_fixture","time":{"start":1730868744864,"stop":1730869107297,"duration":362433},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: No successful 'create infoAction proposal' log found | Failed Logs: None","statusTrace":"logs = [], function_name = 'createInfoGovAction', trigger_type = 'MANUAL'\nmessage = \"No successful 'create infoAction proposal' log found\"\n\n    def assert_successful_log(logs, function_name, trigger_type, message):\n        try:\n>           assert any(\n                log[\"functionName\"] == function_name\n                and log[\"triggerType\"] == trigger_type\n                and log[\"status\"] is True\n                and log[\"success\"] is True\n                for log in logs\n            ), message\nE           AssertionError: No successful 'create infoAction proposal' log found\nE           assert False\nE            +  where False = any(<generator object assert_successful_log.<locals>.<genexpr> at 0x7fb020378f20>)\n\ntest_cases/test_agent_functions.py:6: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_cases.test_agent_functions.TestAgentFunctionExecution object at 0x7fb020c548c0>\nrun_admin_agent_fixture = <Response [200]>\nautonomous_agent_api = <lib.autonomous_agent_api.AutonomousAgentApi object at 0x7fb0205310d0>\n\n    @allure.sub_suite(\"MANUAL\")\n    @allure.title(\"Test Manual Info Action Proposal Logs\")\n    @allure.feature(\"Create Gov Info Action Function\")\n    def test_manual_info_action_proposal_logs(\n        self, run_admin_agent_fixture, autonomous_agent_api\n    ):\n        agent_id = run_admin_agent_fixture.json().get(\"id\")\n        logs = (\n            autonomous_agent_api.get_trigger_history(\n                param=f\"?agent_id={agent_id}&functionName={'createInfoGovAction'}\"\n            )\n            .json()\n            .get(\"items\")\n        )\n>       assert_successful_log(\n            logs,\n            function_name=\"createInfoGovAction\",\n            trigger_type=\"MANUAL\",\n            message=\"No successful 'create infoAction proposal' log found\",\n        )\n\ntest_cases/test_agent_functions.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlogs = [], function_name = 'createInfoGovAction', trigger_type = 'MANUAL'\nmessage = \"No successful 'create infoAction proposal' log found\"\n\n    def assert_successful_log(logs, function_name, trigger_type, message):\n        try:\n            assert any(\n                log[\"functionName\"] == function_name\n                and log[\"triggerType\"] == trigger_type\n                and log[\"status\"] is True\n                and log[\"success\"] is True\n                for log in logs\n            ), message\n        except AssertionError:\n            failed_logs = [log for log in logs if log[\"functionName\"] == function_name]\n    \n            if failed_logs:\n                allure.attach(\n                    str(failed_logs),\n                    name=\"Filtered Logs with Matching Function Name\",\n                    attachment_type=allure.attachment_type.JSON,\n                )\n            else:\n                allure.attach(\n                    \"No log found with the given parameters.\",\n                    name=\"No Matching Logs\",\n                    attachment_type=allure.attachment_type.TEXT,\n                )\n>           raise AssertionError(\n                f\"{message} | Failed Logs: {failed_logs if failed_logs else 'None'}\"\n            )\nE           AssertionError: No successful 'create infoAction proposal' log found | Failed Logs: None\n\ntest_cases/test_agent_functions.py:28: AssertionError","steps":[],"attachments":[{"uid":"7b7b074d60b23d7e","name":"No Matching Logs","source":"7b7b074d60b23d7e.txt","type":"text/plain","size":39}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[{"name":"autonomous_agent_api::0","time":{"start":1730869109339,"stop":1730869109339,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"feature","value":"Create Gov Info Action Function"},{"name":"parentSuite","value":"Agent Function Execution"},{"name":"subSuite","value":"MANUAL"},{"name":"suite","value":"test_agent_functions"},{"name":"host","value":"fv-az1538-855"},{"name":"thread","value":"1893-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_cases.test_agent_functions"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":10,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":10},"items":[{"uid":"ae895bb8ee0356b2","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/16//#testresult/ae895bb8ee0356b2","status":"failed","statusDetails":"AssertionError: No successful 'create infoAction proposal' log found | Failed Logs: None","time":{"start":1730867980408,"stop":1730867980669,"duration":261}},{"uid":"3c4ba5c51e96dd0e","reportUrl":"https://josephrana11.github.io/autonomous-agents/test_backend_allure_report/15//#testresult/3c4ba5c51e96dd0e","status":"failed","statusDetails":"AssertionError: No successful 'create infoAction proposal' log found | Failed Logs: None","time":{"start":1730866967710,"stop":1730866967969,"duration":259}},{"uid":"c15f824ec16a88b5","reportUrl":"https://josephrana11.github.io/autonomous-agents/test_backend_allure_report/14//#testresult/c15f824ec16a88b5","status":"failed","statusDetails":"AssertionError: No successful 'create infoAction proposal' log found | Failed Logs: [{'agentId': 'a1891e4b-1d50-4406-aef2-07703cd70d47', 'functionName': 'createInfoGovAction', 'status': True, 'success': False, 'timestamp': '2024-10-29T07:08:56.921000+00:00', 'message': 'KubærApi [Status 400] : ShelleyTxValidationError ShelleyBasedEraConway (ApplyTxError (ConwayGovFailure (ProposalReturnAccountDoesNotExist (RewardAccount {raNetwork = Testnet, raCredential = KeyHashObj (KeyHash {unKeyHash = \"867cf86848b39cd43da2586ec6824f6e09f09890565bed96da31244d\"})})) :| []))', 'triggerType': 'MANUAL', 'txHash': None, 'instanceIndex': 0, 'parameters': [{'name': 'anchor', 'value': {'url': 'agents.cardanoapi.io', 'dataHash': '1111111111111111111111111111111111111111111111111111111111111111'}}], 'result': 'KubærApi [Status 400] : ShelleyTxValidationError ShelleyBasedEraConway (ApplyTxError (ConwayGovFailure (ProposalReturnAccountDoesNotExist (RewardAccount {raNetwork = Testnet, raCredential = KeyHashObj (KeyHash {unKeyHash = \"867cf86848b39cd43da2586ec6824f6e09f09890565bed96da31244d\"})})) :| []))', 'internal': [{'result': {'url': 'https://metadata.cardanoapi.io/data/e2baa658521155b8f21acc2a39815b58f7ed8550c0e11e019f81e3014cdeed5a', 'dataHash': 'e2baa658521155b8f21acc2a39815b58f7ed8550c0e11e019f81e3014cdeed5a'}, 'message': '', 'success': True, 'timeStamp': '2024-10-29T07:08:56.850Z', 'parameters': ['{\"@context\":{\"@language\":\"en-us\",\"CIP100\":\"https://github.com/cardano-foundation/CIPs/blob/master/CIP-0100/README.md#\",\"CIP108\":\"https://github.com/cardano-foundation/CIPs/blob/master/CIP-0108/README.md#\",\"hashAlgorithm\":\"CIP100:hashAlgorithm\",\"body\":{\"@id\":\"CIP108:body\",\"@context\":{\"references\":{\"@id\":\"CIP108:references\",\"@container\":\"@set\",\"@context\":{\"GovernanceMetadata\":\"CIP100:GovernanceMetadataReference\",\"Other\":\"CIP100:OtherReference\",\"label\":\"CIP100:reference-label\",\"uri\":\"CIP100:reference-uri\",\"referenceHash\":{\"@id\":\"CIP108:referenceHash\",\"@context\":{\"hashDigest\":\"CIP108:hashDigest\",\"hashAlgorithm\":\"CIP100:hashAlgorithm\"}}}},\"title\":\"CIP108:title\",\"abstract\":\"CIP108:abstract\",\"motivation\":\"CIP108:motivation\",\"rationale\":\"CIP108:rationale\"}},\"authors\":{\"@id\":\"CIP100:authors\",\"@container\":\"@set\",\"@context\":{\"name\":\"http://xmlns.com/foaf/0.1/name\",\"witness\":{\"@id\":\"CIP100:witness\",\"@context\":{\"witnessAlgorithm\":\"CIP100:witnessAlgorithm\",\"publicKey\":\"CIP100:publicKey\",\"signature\":\"CIP100:signature\"}}}}},\"authors\":[],\"hashAlgorithm\":\"blake2b-256\",\"body\":{\"abstract\":\"This proposal is created automatically by agent: 304b364a-a58d-4448-b9b4-fb7bb265444b#0\",\"motivation\":\"This proposal is automatically generated by autonomous-agent-testing.\",\"references\":[{\"@type\":\"Other\",\"label\":\"autonomous-agent-testing\",\"uri\":\"https://cardanoapi.github.io/autonomous-agents/archietecture_docusaurus/docs/architecture\"}],\"title\":\"Proposal By Agent 304b364a-a58d-4448-b9b4-fb7bb265444b#0\",\"rationale\":\"This proposal was created as a part of testing for autonomous-agent-testing\"}}'], 'function_name': 'saveMetadata'}]}]","time":{"start":1730186056754,"stop":1730186057018,"duration":264}},{"uid":"4caecfd186235150","reportUrl":"https://josephrana11.github.io/autonomous-agents/test_backend_allure_report/12//#testresult/4caecfd186235150","status":"failed","statusDetails":"AssertionError: No successful 'create infoAction proposal' log found | Failed Logs: [{'agentId': '9e9966b5-f5fc-4061-9049-d56dab97ee7e', 'functionName': 'createInfoGovAction', 'status': True, 'success': False, 'timestamp': '2024-10-29T06:54:18.332000+00:00', 'message': 'KubærApi [Status 400] : ShelleyTxValidationError ShelleyBasedEraConway (ApplyTxError (ConwayGovFailure (ProposalReturnAccountDoesNotExist (RewardAccount {raNetwork = Testnet, raCredential = KeyHashObj (KeyHash {unKeyHash = \"99de842088b80e8aac9a528ff912e9779af21142ccd2116f11130d74\"})})) :| []))', 'triggerType': 'MANUAL', 'txHash': None, 'instanceIndex': 0, 'parameters': [{'name': 'anchor', 'value': {'url': 'agents.cardanoapi.io', 'dataHash': '1111111111111111111111111111111111111111111111111111111111111111'}}], 'result': 'KubærApi [Status 400] : ShelleyTxValidationError ShelleyBasedEraConway (ApplyTxError (ConwayGovFailure (ProposalReturnAccountDoesNotExist (RewardAccount {raNetwork = Testnet, raCredential = KeyHashObj (KeyHash {unKeyHash = \"99de842088b80e8aac9a528ff912e9779af21142ccd2116f11130d74\"})})) :| []))', 'internal': [{'result': {'url': 'https://metadata.cardanoapi.io/data/7f73e94b1372c30bf4afb0f32491db63dfe58fd2d4679b99bb362eaf9d13e442', 'dataHash': '7f73e94b1372c30bf4afb0f32491db63dfe58fd2d4679b99bb362eaf9d13e442'}, 'message': '', 'success': True, 'timeStamp': '2024-10-29T06:54:18.270Z', 'parameters': ['{\"@context\":{\"@language\":\"en-us\",\"CIP100\":\"https://github.com/cardano-foundation/CIPs/blob/master/CIP-0100/README.md#\",\"CIP108\":\"https://github.com/cardano-foundation/CIPs/blob/master/CIP-0108/README.md#\",\"hashAlgorithm\":\"CIP100:hashAlgorithm\",\"body\":{\"@id\":\"CIP108:body\",\"@context\":{\"references\":{\"@id\":\"CIP108:references\",\"@container\":\"@set\",\"@context\":{\"GovernanceMetadata\":\"CIP100:GovernanceMetadataReference\",\"Other\":\"CIP100:OtherReference\",\"label\":\"CIP100:reference-label\",\"uri\":\"CIP100:reference-uri\",\"referenceHash\":{\"@id\":\"CIP108:referenceHash\",\"@context\":{\"hashDigest\":\"CIP108:hashDigest\",\"hashAlgorithm\":\"CIP100:hashAlgorithm\"}}}},\"title\":\"CIP108:title\",\"abstract\":\"CIP108:abstract\",\"motivation\":\"CIP108:motivation\",\"rationale\":\"CIP108:rationale\"}},\"authors\":{\"@id\":\"CIP100:authors\",\"@container\":\"@set\",\"@context\":{\"name\":\"http://xmlns.com/foaf/0.1/name\",\"witness\":{\"@id\":\"CIP100:witness\",\"@context\":{\"witnessAlgorithm\":\"CIP100:witnessAlgorithm\",\"publicKey\":\"CIP100:publicKey\",\"signature\":\"CIP100:signature\"}}}}},\"authors\":[],\"hashAlgorithm\":\"blake2b-256\",\"body\":{\"abstract\":\"This proposal is created automatically by agent: 02915c52-00da-4e8c-a935-614bc83971d2#0\",\"motivation\":\"This proposal is automatically generated by autonomous-agent-testing.\",\"references\":[{\"@type\":\"Other\",\"label\":\"autonomous-agent-testing\",\"uri\":\"https://cardanoapi.github.io/autonomous-agents/archietecture_docusaurus/docs/architecture\"}],\"title\":\"Proposal By Agent 02915c52-00da-4e8c-a935-614bc83971d2#0\",\"rationale\":\"This proposal was created as a part of testing for autonomous-agent-testing\"}}'], 'function_name': 'saveMetadata'}]}]","time":{"start":1730185178263,"stop":1730185178490,"duration":227}},{"uid":"8aacec14d1eaec77","reportUrl":"https://josephrana11.github.io/autonomous-agents/test_backend_allure_report/10//#testresult/8aacec14d1eaec77","status":"failed","statusDetails":"AssertionError: No successful 'create infoAction proposal' log found | Failed Logs: [{'agentId': '2b2a91c9-bc0b-463c-a2b7-804e6d5ca662', 'functionName': 'createInfoGovAction', 'status': True, 'success': False, 'timestamp': '2024-10-29T06:29:19.659000+00:00', 'message': 'KubærApi [Status 400] : ShelleyTxValidationError ShelleyBasedEraConway (ApplyTxError (ConwayGovFailure (ProposalReturnAccountDoesNotExist (RewardAccount {raNetwork = Testnet, raCredential = KeyHashObj (KeyHash {unKeyHash = \"31c03059f40986b908067dbceaac766a6b4cfb7dc659df76bdf49ad7\"})})) :| []))', 'triggerType': 'MANUAL', 'txHash': None, 'instanceIndex': 0, 'parameters': [{'name': 'anchor', 'value': {'url': 'agents.cardanoapi.io', 'dataHash': '1111111111111111111111111111111111111111111111111111111111111111'}}], 'result': 'KubærApi [Status 400] : ShelleyTxValidationError ShelleyBasedEraConway (ApplyTxError (ConwayGovFailure (ProposalReturnAccountDoesNotExist (RewardAccount {raNetwork = Testnet, raCredential = KeyHashObj (KeyHash {unKeyHash = \"31c03059f40986b908067dbceaac766a6b4cfb7dc659df76bdf49ad7\"})})) :| []))', 'internal': [{'result': {'url': 'https://metadata.cardanoapi.io/data/099c39e2cc17fb1dfd70d6ba9162ed0119d17952de8d915ee85b3a917e77c5e6', 'dataHash': '099c39e2cc17fb1dfd70d6ba9162ed0119d17952de8d915ee85b3a917e77c5e6'}, 'message': '', 'success': True, 'timeStamp': '2024-10-29T06:29:19.598Z', 'parameters': ['{\"@context\":{\"@language\":\"en-us\",\"CIP100\":\"https://github.com/cardano-foundation/CIPs/blob/master/CIP-0100/README.md#\",\"CIP108\":\"https://github.com/cardano-foundation/CIPs/blob/master/CIP-0108/README.md#\",\"hashAlgorithm\":\"CIP100:hashAlgorithm\",\"body\":{\"@id\":\"CIP108:body\",\"@context\":{\"references\":{\"@id\":\"CIP108:references\",\"@container\":\"@set\",\"@context\":{\"GovernanceMetadata\":\"CIP100:GovernanceMetadataReference\",\"Other\":\"CIP100:OtherReference\",\"label\":\"CIP100:reference-label\",\"uri\":\"CIP100:reference-uri\",\"referenceHash\":{\"@id\":\"CIP108:referenceHash\",\"@context\":{\"hashDigest\":\"CIP108:hashDigest\",\"hashAlgorithm\":\"CIP100:hashAlgorithm\"}}}},\"title\":\"CIP108:title\",\"abstract\":\"CIP108:abstract\",\"motivation\":\"CIP108:motivation\",\"rationale\":\"CIP108:rationale\"}},\"authors\":{\"@id\":\"CIP100:authors\",\"@container\":\"@set\",\"@context\":{\"name\":\"http://xmlns.com/foaf/0.1/name\",\"witness\":{\"@id\":\"CIP100:witness\",\"@context\":{\"witnessAlgorithm\":\"CIP100:witnessAlgorithm\",\"publicKey\":\"CIP100:publicKey\",\"signature\":\"CIP100:signature\"}}}}},\"authors\":[],\"hashAlgorithm\":\"blake2b-256\",\"body\":{\"abstract\":\"This proposal is created automatically by agent: be3b6b5c-c097-4e99-95a0-fc4cfde93de8#0\",\"motivation\":\"This proposal is automatically generated by autonomous-agent-testing.\",\"references\":[{\"@type\":\"Other\",\"label\":\"autonomous-agent-testing\",\"uri\":\"https://cardanoapi.github.io/autonomous-agents/archietecture_docusaurus/docs/architecture\"}],\"title\":\"Proposal By Agent be3b6b5c-c097-4e99-95a0-fc4cfde93de8#0\",\"rationale\":\"This proposal was created as a part of testing for autonomous-agent-testing\"}}'], 'function_name': 'saveMetadata'}]}]","time":{"start":1730183679567,"stop":1730183679820,"duration":253}},{"uid":"b9b068071b485abc","reportUrl":"https://josephrana11.github.io/autonomous-agents/test_backend_allure_report/9//#testresult/b9b068071b485abc","status":"failed","statusDetails":"AssertionError: No successful 'create infoAction proposal' log found | Failed Logs: [{'agentId': 'e4577f0e-b8ee-4c1e-ad08-a54fb7c80cc3', 'functionName': 'createInfoGovAction', 'status': True, 'success': False, 'timestamp': '2024-10-29T06:08:32.073000+00:00', 'message': 'KubærApi [Status 400] : ShelleyTxValidationError ShelleyBasedEraConway (ApplyTxError (ConwayGovFailure (ProposalReturnAccountDoesNotExist (RewardAccount {raNetwork = Testnet, raCredential = KeyHashObj (KeyHash {unKeyHash = \"a0ea8c4fa4382959f9c21175f1f183024210904b61affa719f45301a\"})})) :| []))', 'triggerType': 'MANUAL', 'txHash': None, 'instanceIndex': 0, 'parameters': [{'name': 'anchor', 'value': {'url': 'agents.cardanoapi.io', 'dataHash': '1111111111111111111111111111111111111111111111111111111111111111'}}], 'result': 'KubærApi [Status 400] : ShelleyTxValidationError ShelleyBasedEraConway (ApplyTxError (ConwayGovFailure (ProposalReturnAccountDoesNotExist (RewardAccount {raNetwork = Testnet, raCredential = KeyHashObj (KeyHash {unKeyHash = \"a0ea8c4fa4382959f9c21175f1f183024210904b61affa719f45301a\"})})) :| []))', 'internal': [{'result': {'url': 'https://metadata.cardanoapi.io/data/81618766f10b898e503ce69a6d33f8f8ae2a3eacb37806b77c0439536dd67997', 'dataHash': '81618766f10b898e503ce69a6d33f8f8ae2a3eacb37806b77c0439536dd67997'}, 'message': '', 'success': True, 'timeStamp': '2024-10-29T06:08:32.014Z', 'parameters': ['{\"@context\":{\"@language\":\"en-us\",\"CIP100\":\"https://github.com/cardano-foundation/CIPs/blob/master/CIP-0100/README.md#\",\"CIP108\":\"https://github.com/cardano-foundation/CIPs/blob/master/CIP-0108/README.md#\",\"hashAlgorithm\":\"CIP100:hashAlgorithm\",\"body\":{\"@id\":\"CIP108:body\",\"@context\":{\"references\":{\"@id\":\"CIP108:references\",\"@container\":\"@set\",\"@context\":{\"GovernanceMetadata\":\"CIP100:GovernanceMetadataReference\",\"Other\":\"CIP100:OtherReference\",\"label\":\"CIP100:reference-label\",\"uri\":\"CIP100:reference-uri\",\"referenceHash\":{\"@id\":\"CIP108:referenceHash\",\"@context\":{\"hashDigest\":\"CIP108:hashDigest\",\"hashAlgorithm\":\"CIP100:hashAlgorithm\"}}}},\"title\":\"CIP108:title\",\"abstract\":\"CIP108:abstract\",\"motivation\":\"CIP108:motivation\",\"rationale\":\"CIP108:rationale\"}},\"authors\":{\"@id\":\"CIP100:authors\",\"@container\":\"@set\",\"@context\":{\"name\":\"http://xmlns.com/foaf/0.1/name\",\"witness\":{\"@id\":\"CIP100:witness\",\"@context\":{\"witnessAlgorithm\":\"CIP100:witnessAlgorithm\",\"publicKey\":\"CIP100:publicKey\",\"signature\":\"CIP100:signature\"}}}}},\"authors\":[],\"hashAlgorithm\":\"blake2b-256\",\"body\":{\"abstract\":\"This proposal is created automatically by agent: 2e5e5aa7-87cd-4c64-80b0-a5b60d0442a8#0\",\"motivation\":\"This proposal is automatically generated by autonomous-agent-testing.\",\"references\":[{\"@type\":\"Other\",\"label\":\"autonomous-agent-testing\",\"uri\":\"https://cardanoapi.github.io/autonomous-agents/archietecture_docusaurus/docs/architecture\"}],\"title\":\"Proposal By Agent 2e5e5aa7-87cd-4c64-80b0-a5b60d0442a8#0\",\"rationale\":\"This proposal was created as a part of testing for autonomous-agent-testing\"}}'], 'function_name': 'saveMetadata'}]}]","time":{"start":1730182431963,"stop":1730182432192,"duration":229}},{"uid":"36d5d63ae15be186","reportUrl":"https://josephrana11.github.io/autonomous-agents/test_backend_allure_report/8//#testresult/36d5d63ae15be186","status":"failed","statusDetails":"AssertionError: No successful 'create infoAction proposal' log found | Failed Logs: None","time":{"start":1730182022374,"stop":1730182022602,"duration":228}},{"uid":"3ac86a3d8bb8028d","reportUrl":"https://josephrana11.github.io/autonomous-agents/test_backend_allure_report/7//#testresult/3ac86a3d8bb8028d","status":"failed","statusDetails":"AssertionError: No successful 'create infoAction proposal' log found | Failed Logs: None","time":{"start":1730181732773,"stop":1730181733051,"duration":278}},{"uid":"68e3787e05467a3b","reportUrl":"https://josephrana11.github.io/autonomous-agents/test_backend_allure_report/6//#testresult/68e3787e05467a3b","status":"failed","statusDetails":"AssertionError: No successful 'create infoAction proposal' log found | Failed Logs: None","time":{"start":1730178758462,"stop":1730178758731,"duration":269}}]},"tags":[]},"source":"534832cf7d7602b5.json","parameterValues":[]}