{"uid":"cee7928d68cc8618","name":"Test Cron Transfer ADA Logs","fullName":"test_cases.test_agent_functions.TestAgentFunctionExecution#test_cron_transfer_ada_logs","historyId":"8f129459ef0776a0fa46da5fc475ea3a","time":{"start":1730869107753,"stop":1730869107998,"duration":245},"status":"failed","statusMessage":"AssertionError: No successful 'transferADA' log found | Failed Logs: None","statusTrace":"logs = [], function_name = 'transferADA', trigger_type = 'CRON'\nmessage = \"No successful 'transferADA' log found\"\n\n    def assert_successful_log(logs, function_name, trigger_type, message):\n        try:\n>           assert any(\n                log[\"functionName\"] == function_name\n                and log[\"triggerType\"] == trigger_type\n                and log[\"status\"] is True\n                and log[\"success\"] is True\n                for log in logs\n            ), message\nE           AssertionError: No successful 'transferADA' log found\nE           assert False\nE            +  where False = any(<generator object assert_successful_log.<locals>.<genexpr> at 0x7fb0204abe60>)\n\ntest_cases/test_agent_functions.py:6: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_cases.test_agent_functions.TestAgentFunctionExecution object at 0x7fb020c56c60>\nrun_admin_agent_fixture = <Response [200]>\nautonomous_agent_api = <lib.autonomous_agent_api.AutonomousAgentApi object at 0x7fb0205310d0>\n\n    @allure.sub_suite(\"CRON\")\n    @allure.title(\"Test Cron Transfer ADA Logs\")\n    @allure.feature(\"Transfer Ada Cron Function\")\n    def test_cron_transfer_ada_logs(\n        self, run_admin_agent_fixture, autonomous_agent_api\n    ):\n        agent_id = run_admin_agent_fixture.json().get(\"id\")\n        logs = (\n            autonomous_agent_api.get_trigger_history(\n                param=f\"?agent_id={agent_id}&functionName={'transferADA'}\"\n            )\n            .json()\n            .get(\"items\")\n        )\n>       assert_successful_log(\n            logs,\n            function_name=\"transferADA\",\n            trigger_type=\"CRON\",\n            message=\"No successful 'transferADA' log found\",\n        )\n\ntest_cases/test_agent_functions.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlogs = [], function_name = 'transferADA', trigger_type = 'CRON'\nmessage = \"No successful 'transferADA' log found\"\n\n    def assert_successful_log(logs, function_name, trigger_type, message):\n        try:\n            assert any(\n                log[\"functionName\"] == function_name\n                and log[\"triggerType\"] == trigger_type\n                and log[\"status\"] is True\n                and log[\"success\"] is True\n                for log in logs\n            ), message\n        except AssertionError:\n            failed_logs = [log for log in logs if log[\"functionName\"] == function_name]\n    \n            if failed_logs:\n                allure.attach(\n                    str(failed_logs),\n                    name=\"Filtered Logs with Matching Function Name\",\n                    attachment_type=allure.attachment_type.JSON,\n                )\n            else:\n                allure.attach(\n                    \"No log found with the given parameters.\",\n                    name=\"No Matching Logs\",\n                    attachment_type=allure.attachment_type.TEXT,\n                )\n>           raise AssertionError(\n                f\"{message} | Failed Logs: {failed_logs if failed_logs else 'None'}\"\n            )\nE           AssertionError: No successful 'transferADA' log found | Failed Logs: None\n\ntest_cases/test_agent_functions.py:28: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"autonomous_agent_api","time":{"start":1730868620713,"stop":1730868620714,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"admin_login_response","time":{"start":1730868622943,"stop":1730868623065,"duration":122},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"admin_login_cookie","time":{"start":1730868623065,"stop":1730868623065,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"create_template_fixture","time":{"start":1730868623065,"stop":1730868623192,"duration":127},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"edit_template_fixture","time":{"start":1730868623192,"stop":1730868623332,"duration":140},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"create_admin_agent_fixture","time":{"start":1730868623332,"stop":1730868623463,"duration":131},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"edit_admin_agent_fixture","time":{"start":1730868623658,"stop":1730868623841,"duration":183},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"load_funds_to_agent_address","time":{"start":1730868623843,"stop":1730868744864,"duration":121021},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"run_admin_agent_fixture","time":{"start":1730868744864,"stop":1730869107297,"duration":362433},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: No successful 'transferADA' log found | Failed Logs: None","statusTrace":"logs = [], function_name = 'transferADA', trigger_type = 'CRON'\nmessage = \"No successful 'transferADA' log found\"\n\n    def assert_successful_log(logs, function_name, trigger_type, message):\n        try:\n>           assert any(\n                log[\"functionName\"] == function_name\n                and log[\"triggerType\"] == trigger_type\n                and log[\"status\"] is True\n                and log[\"success\"] is True\n                for log in logs\n            ), message\nE           AssertionError: No successful 'transferADA' log found\nE           assert False\nE            +  where False = any(<generator object assert_successful_log.<locals>.<genexpr> at 0x7fb0204abe60>)\n\ntest_cases/test_agent_functions.py:6: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_cases.test_agent_functions.TestAgentFunctionExecution object at 0x7fb020c56c60>\nrun_admin_agent_fixture = <Response [200]>\nautonomous_agent_api = <lib.autonomous_agent_api.AutonomousAgentApi object at 0x7fb0205310d0>\n\n    @allure.sub_suite(\"CRON\")\n    @allure.title(\"Test Cron Transfer ADA Logs\")\n    @allure.feature(\"Transfer Ada Cron Function\")\n    def test_cron_transfer_ada_logs(\n        self, run_admin_agent_fixture, autonomous_agent_api\n    ):\n        agent_id = run_admin_agent_fixture.json().get(\"id\")\n        logs = (\n            autonomous_agent_api.get_trigger_history(\n                param=f\"?agent_id={agent_id}&functionName={'transferADA'}\"\n            )\n            .json()\n            .get(\"items\")\n        )\n>       assert_successful_log(\n            logs,\n            function_name=\"transferADA\",\n            trigger_type=\"CRON\",\n            message=\"No successful 'transferADA' log found\",\n        )\n\ntest_cases/test_agent_functions.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlogs = [], function_name = 'transferADA', trigger_type = 'CRON'\nmessage = \"No successful 'transferADA' log found\"\n\n    def assert_successful_log(logs, function_name, trigger_type, message):\n        try:\n            assert any(\n                log[\"functionName\"] == function_name\n                and log[\"triggerType\"] == trigger_type\n                and log[\"status\"] is True\n                and log[\"success\"] is True\n                for log in logs\n            ), message\n        except AssertionError:\n            failed_logs = [log for log in logs if log[\"functionName\"] == function_name]\n    \n            if failed_logs:\n                allure.attach(\n                    str(failed_logs),\n                    name=\"Filtered Logs with Matching Function Name\",\n                    attachment_type=allure.attachment_type.JSON,\n                )\n            else:\n                allure.attach(\n                    \"No log found with the given parameters.\",\n                    name=\"No Matching Logs\",\n                    attachment_type=allure.attachment_type.TEXT,\n                )\n>           raise AssertionError(\n                f\"{message} | Failed Logs: {failed_logs if failed_logs else 'None'}\"\n            )\nE           AssertionError: No successful 'transferADA' log found | Failed Logs: None\n\ntest_cases/test_agent_functions.py:28: AssertionError","steps":[],"attachments":[{"uid":"9c1f8ffc7f3fab10","name":"No Matching Logs","source":"9c1f8ffc7f3fab10.txt","type":"text/plain","size":39}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[{"name":"autonomous_agent_api::0","time":{"start":1730869109339,"stop":1730869109339,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"parentSuite","value":"Agent Function Execution"},{"name":"feature","value":"Transfer Ada Cron Function"},{"name":"subSuite","value":"CRON"},{"name":"suite","value":"test_agent_functions"},{"name":"host","value":"fv-az1538-855"},{"name":"thread","value":"1893-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_cases.test_agent_functions"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":6,"broken":0,"skipped":0,"passed":4,"unknown":0,"total":10},"items":[{"uid":"5a5dc86ef368bed7","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/16//#testresult/5a5dc86ef368bed7","status":"failed","statusDetails":"AssertionError: No successful 'transferADA' log found | Failed Logs: None","time":{"start":1730867980109,"stop":1730867980375,"duration":266}},{"uid":"8ce37afe1e70076d","reportUrl":"https://josephrana11.github.io/autonomous-agents/test_backend_allure_report/15//#testresult/8ce37afe1e70076d","status":"failed","statusDetails":"AssertionError: No successful 'transferADA' log found | Failed Logs: None","time":{"start":1730866967438,"stop":1730866967676,"duration":238}},{"uid":"568afbee715c1abc","reportUrl":"https://josephrana11.github.io/autonomous-agents/test_backend_allure_report/14//#testresult/568afbee715c1abc","status":"passed","time":{"start":1730186056498,"stop":1730186056753,"duration":255}},{"uid":"c7c05c23c673112b","reportUrl":"https://josephrana11.github.io/autonomous-agents/test_backend_allure_report/12//#testresult/c7c05c23c673112b","status":"passed","time":{"start":1730185178023,"stop":1730185178261,"duration":238}},{"uid":"42953e131f565076","reportUrl":"https://josephrana11.github.io/autonomous-agents/test_backend_allure_report/10//#testresult/42953e131f565076","status":"passed","time":{"start":1730183679308,"stop":1730183679566,"duration":258}},{"uid":"9297988602f1dd0","reportUrl":"https://josephrana11.github.io/autonomous-agents/test_backend_allure_report/9//#testresult/9297988602f1dd0","status":"passed","time":{"start":1730182431722,"stop":1730182431962,"duration":240}},{"uid":"7c144a8a1397d0d8","reportUrl":"https://josephrana11.github.io/autonomous-agents/test_backend_allure_report/8//#testresult/7c144a8a1397d0d8","status":"failed","statusDetails":"AssertionError: No successful 'transferADA' log found | Failed Logs: None","time":{"start":1730182022078,"stop":1730182022339,"duration":261}},{"uid":"f339d67c0453efce","reportUrl":"https://josephrana11.github.io/autonomous-agents/test_backend_allure_report/7//#testresult/f339d67c0453efce","status":"failed","statusDetails":"AssertionError: No successful 'transferADA' log found | Failed Logs: None","time":{"start":1730181732457,"stop":1730181732740,"duration":283}},{"uid":"f76595b533eec0ad","reportUrl":"https://josephrana11.github.io/autonomous-agents/test_backend_allure_report/6//#testresult/f76595b533eec0ad","status":"failed","statusDetails":"AssertionError: No successful 'transferADA' log found | Failed Logs: None","time":{"start":1730178758170,"stop":1730178758428,"duration":258}}]},"tags":[]},"source":"cee7928d68cc8618.json","parameterValues":[]}