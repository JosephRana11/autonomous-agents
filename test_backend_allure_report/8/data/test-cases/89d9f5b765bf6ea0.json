{"uid":"89d9f5b765bf6ea0","name":"Test Event Vote Logs","fullName":"test_cases.test_agent_functions.TestAgentFunctionExecution#test_event_vote_logs","historyId":"b479afaeccaeb0b2b306544ea95f6f33","time":{"start":1730182022608,"stop":1730182022880,"duration":272},"status":"failed","statusMessage":"AssertionError: No successful 'voteEvent' log found | Failed Logs: None","statusTrace":"logs = [], function_name = 'voteOnProposal', trigger_type = 'EVENT'\nmessage = \"No successful 'voteEvent' log found\"\n\n    def assert_successful_log(logs, function_name, trigger_type, message):\n        try:\n>           assert any(\n                log[\"functionName\"] == function_name\n                and log[\"triggerType\"] == trigger_type\n                and log[\"status\"] is True\n                and log[\"success\"] is True\n                for log in logs\n            ), message\nE           AssertionError: No successful 'voteEvent' log found\nE           assert False\nE            +  where False = any(<generator object assert_successful_log.<locals>.<genexpr> at 0x7f9a2df7de00>)\n\ntest_cases/test_agent_functions.py:6: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_cases.test_agent_functions.TestAgentFunctionExecution object at 0x7f9a2e90da00>\nrun_admin_agent_fixture = <Response [200]>\nautonomous_agent_api = <lib.autonomous_agent_api.AutonomousAgentApi object at 0x7f9a2f4341d0>\n\n    @allure.sub_suite(\"EVENT\")\n    @allure.title(\"Test Event Vote Logs\")\n    @allure.feature(\"Vote Event Function\")\n    def test_event_vote_logs(self, run_admin_agent_fixture, autonomous_agent_api):\n        agent_id = run_admin_agent_fixture.json().get(\"id\")\n        logs = (\n            autonomous_agent_api.get_trigger_history(\n                param=\"?agent_id=\" + str(agent_id) + \"&functionName=voteOnProposal\"\n            )\n            .json()\n            .get(\"items\")\n        )\n>       assert_successful_log(\n            logs,\n            function_name=\"voteOnProposal\",\n            trigger_type=\"EVENT\",\n            message=\"No successful 'voteEvent' log found\",\n        )\n\ntest_cases/test_agent_functions.py:90: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlogs = [], function_name = 'voteOnProposal', trigger_type = 'EVENT'\nmessage = \"No successful 'voteEvent' log found\"\n\n    def assert_successful_log(logs, function_name, trigger_type, message):\n        try:\n            assert any(\n                log[\"functionName\"] == function_name\n                and log[\"triggerType\"] == trigger_type\n                and log[\"status\"] is True\n                and log[\"success\"] is True\n                for log in logs\n            ), message\n        except AssertionError:\n            failed_logs = [log for log in logs if log[\"functionName\"] == function_name]\n    \n            if failed_logs:\n                allure.attach(\n                    str(failed_logs),\n                    name=\"Filtered Logs with Matching Function Name\",\n                    attachment_type=allure.attachment_type.JSON,\n                )\n            else:\n                allure.attach(\n                    \"No log found with the given parameters.\",\n                    name=\"No Matching Logs\",\n                    attachment_type=allure.attachment_type.TEXT,\n                )\n>           raise AssertionError(\n                f\"{message} | Failed Logs: {failed_logs if failed_logs else 'None'}\"\n            )\nE           AssertionError: No successful 'voteEvent' log found | Failed Logs: None\n\ntest_cases/test_agent_functions.py:28: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"autonomous_agent_api","time":{"start":1730181534168,"stop":1730181534168,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"admin_login_response","time":{"start":1730181537025,"stop":1730181537142,"duration":117},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"admin_login_cookie","time":{"start":1730181537143,"stop":1730181537143,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"create_template_fixture","time":{"start":1730181537143,"stop":1730181537267,"duration":124},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"edit_template_fixture","time":{"start":1730181537267,"stop":1730181537404,"duration":137},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"create_admin_agent_fixture","time":{"start":1730181537404,"stop":1730181537536,"duration":132},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"edit_admin_agent_fixture","time":{"start":1730181537726,"stop":1730181537925,"duration":199},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"admin_agent_fixture","time":{"start":1730181537927,"stop":1730181538117,"duration":190},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"load_funds_to_agent_address","time":{"start":1730181538117,"stop":1730181659093,"duration":120976},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"run_admin_agent_fixture","time":{"start":1730181659093,"stop":1730182021636,"duration":362543},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: No successful 'voteEvent' log found | Failed Logs: None","statusTrace":"logs = [], function_name = 'voteOnProposal', trigger_type = 'EVENT'\nmessage = \"No successful 'voteEvent' log found\"\n\n    def assert_successful_log(logs, function_name, trigger_type, message):\n        try:\n>           assert any(\n                log[\"functionName\"] == function_name\n                and log[\"triggerType\"] == trigger_type\n                and log[\"status\"] is True\n                and log[\"success\"] is True\n                for log in logs\n            ), message\nE           AssertionError: No successful 'voteEvent' log found\nE           assert False\nE            +  where False = any(<generator object assert_successful_log.<locals>.<genexpr> at 0x7f9a2df7de00>)\n\ntest_cases/test_agent_functions.py:6: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_cases.test_agent_functions.TestAgentFunctionExecution object at 0x7f9a2e90da00>\nrun_admin_agent_fixture = <Response [200]>\nautonomous_agent_api = <lib.autonomous_agent_api.AutonomousAgentApi object at 0x7f9a2f4341d0>\n\n    @allure.sub_suite(\"EVENT\")\n    @allure.title(\"Test Event Vote Logs\")\n    @allure.feature(\"Vote Event Function\")\n    def test_event_vote_logs(self, run_admin_agent_fixture, autonomous_agent_api):\n        agent_id = run_admin_agent_fixture.json().get(\"id\")\n        logs = (\n            autonomous_agent_api.get_trigger_history(\n                param=\"?agent_id=\" + str(agent_id) + \"&functionName=voteOnProposal\"\n            )\n            .json()\n            .get(\"items\")\n        )\n>       assert_successful_log(\n            logs,\n            function_name=\"voteOnProposal\",\n            trigger_type=\"EVENT\",\n            message=\"No successful 'voteEvent' log found\",\n        )\n\ntest_cases/test_agent_functions.py:90: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlogs = [], function_name = 'voteOnProposal', trigger_type = 'EVENT'\nmessage = \"No successful 'voteEvent' log found\"\n\n    def assert_successful_log(logs, function_name, trigger_type, message):\n        try:\n            assert any(\n                log[\"functionName\"] == function_name\n                and log[\"triggerType\"] == trigger_type\n                and log[\"status\"] is True\n                and log[\"success\"] is True\n                for log in logs\n            ), message\n        except AssertionError:\n            failed_logs = [log for log in logs if log[\"functionName\"] == function_name]\n    \n            if failed_logs:\n                allure.attach(\n                    str(failed_logs),\n                    name=\"Filtered Logs with Matching Function Name\",\n                    attachment_type=allure.attachment_type.JSON,\n                )\n            else:\n                allure.attach(\n                    \"No log found with the given parameters.\",\n                    name=\"No Matching Logs\",\n                    attachment_type=allure.attachment_type.TEXT,\n                )\n>           raise AssertionError(\n                f\"{message} | Failed Logs: {failed_logs if failed_logs else 'None'}\"\n            )\nE           AssertionError: No successful 'voteEvent' log found | Failed Logs: None\n\ntest_cases/test_agent_functions.py:28: AssertionError","steps":[],"attachments":[{"uid":"81a873b152ccf3cb","name":"No Matching Logs","source":"81a873b152ccf3cb.txt","type":"text/plain","size":39}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[{"name":"autonomous_agent_api::0","time":{"start":1730182023676,"stop":1730182023676,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"subSuite","value":"EVENT"},{"name":"feature","value":"Vote Event Function"},{"name":"parentSuite","value":"Agent Function Execution"},{"name":"suite","value":"test_agent_functions"},{"name":"host","value":"fv-az1499-278"},{"name":"thread","value":"1985-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_cases.test_agent_functions"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":3},"items":[{"uid":"9d80e2e5782b398c","reportUrl":"https://josephrana11.github.io/autonomous-agents/test_backend_allure_report/7//#testresult/9d80e2e5782b398c","status":"failed","statusDetails":"AssertionError: No successful 'voteEvent' log found | Failed Logs: None","time":{"start":1730181733057,"stop":1730181733347,"duration":290}},{"uid":"5b2eb108300ffb7c","reportUrl":"https://josephrana11.github.io/autonomous-agents/test_backend_allure_report/6//#testresult/5b2eb108300ffb7c","status":"failed","statusDetails":"AssertionError: No successful 'voteEvent' log found | Failed Logs: None","time":{"start":1730178758737,"stop":1730178758972,"duration":235}}]},"tags":[]},"source":"89d9f5b765bf6ea0.json","parameterValues":[]}